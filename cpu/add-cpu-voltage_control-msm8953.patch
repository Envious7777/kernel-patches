From d1303a20c96b405bc8a3dfff1ab06a8655a51a9b Mon Sep 17 00:00:00 2001
From: root <root@localhost.localdomain>
Date: Fri, 8 Nov 2019 21:48:01 -0500
Subject: [PATCH 3/3] add-cpu-volt_control

---
 drivers/clk/msm/clock-cpu-8953.c   | 218 +++++++++++++++++++++++++++++
 drivers/cpufreq/cpufreq.c          |  20 +++
 drivers/regulator/Kconfig          |   7 +
 drivers/regulator/cpr3-regulator.c |  76 ++++++++++
 4 files changed, 321 insertions(+)

diff --git a/drivers/clk/msm/clock-cpu-8953.c b/drivers/clk/msm/clock-cpu-8953.c
index 83cd8829..1eab0d76 100644
--- a/drivers/clk/msm/clock-cpu-8953.c
+++ b/drivers/clk/msm/clock-cpu-8953.c
@@ -39,6 +39,11 @@
 
 #include "clock.h"
 
+#ifdef CONFIG_CPU_VOLTAGE_TABLE
+#include <linux/cpufreq.h>
+#include <linux/regulator/driver.h>
+#endif
+
 #define APCS_PLL_MODE		0x0
 #define APCS_PLL_L_VAL		0x8
 #define APCS_PLL_ALPHA_VAL	0x10
@@ -480,6 +485,63 @@ static struct clk *logical_cpu_to_clk(int cpu)
 	return NULL;
 }
 
+#ifdef CONFIG_CPU_VOLTAGE_TABLE
+#define CPU_VDD_MIN	 600
+#define CPU_VDD_MAX	1450
+ extern bool is_used_by_scaling(unsigned int freq);
+ ssize_t show_UV_mV_table(struct cpufreq_policy *policy, char *buf)
+{
+	int i, freq, len = 0;
+	/* use only master core 0 */
+	int num_levels = cpu_clk[0]->vdd_class->num_levels;
+	/* sanity checks */
+	if (num_levels < 0)
+		return -EINVAL;
+	if (!buf)
+		return -EINVAL;
+	/* format UV_mv table */
+	for (i = 0; i < num_levels; i++) {
+		/* show only those used in scaling */
+		if (!is_used_by_scaling(freq = cpu_clk[0]->fmax[i] / 1000))
+			continue;
+		len += sprintf(buf + len, "%dmhz: %u mV\n", freq / 1000,
+			       cpu_clk[0]->vdd_class->vdd_uv[i] / 1000);
+	}
+	return len;
+}
+ ssize_t store_UV_mV_table(struct cpufreq_policy *policy, char *buf,
+				size_t count)
+{
+	int i, j;
+	int ret = 0;
+	unsigned int val;
+	char size_cur[8];
+	/* use only master core 0 */
+	int num_levels = cpu_clk[0]->vdd_class->num_levels;
+	/* sanity checks */
+	if (num_levels < 0)
+		return -1;
+	for (i = 0; i < num_levels; i++) {
+		if (!is_used_by_scaling(cpu_clk[0]->fmax[i] / 1000))
+			continue;
+		ret = sscanf(buf, "%u", &val);
+		if (!ret)
+			return -EINVAL;
+		/* bounds check */
+		val = min( max((unsigned int)val, (unsigned int)CPU_VDD_MIN),
+			(unsigned int)CPU_VDD_MAX);
+		/* apply it to all available cores */
+		for (j = 0; j < NR_CPUS; j++)
+			cpu_clk[j]->vdd_class->vdd_uv[i] = val * 1000;
+		/* Non-standard sysfs interface: advance buf */
+		ret = sscanf(buf, "%s", size_cur);
+		buf += strlen(size_cur) + 1;
+	}
+	pr_warn("faux123: user voltage table modified!\n");
+	return count;
+}
+#endif
+
 static int add_opp(struct clk *c, struct device *dev, unsigned long max_rate)
 {
 	unsigned long rate = 0;
@@ -589,6 +651,162 @@ static void populate_opp_table(struct platform_device *pdev)
 	print_opp_table(a53_pwr_cpu, a53_perf_cpu);
 }
 
+#ifdef CONFIG_VOLTAGE_CONTROL
+extern int cpr_regulator_get_ceiling_voltage(struct regulator *regulator,int cori);
+extern int cpr_regulator_get_floor_voltage(struct regulator *regulator,int cori);
+extern int cpr_regulator_get_last_voltage(struct regulator *regulator,int cori);
+extern int cpr_regulator_set_ceiling_voltage(struct regulator *regulator,int cori, int volt);
+extern int cpr_regulator_set_floor_voltage(struct regulator *regulator,int cori, int volt);
+extern int cpr_regulator_set_last_voltage(struct regulator *regulator,int cori, int volt);
+
+ssize_t get_Voltages(char *buf)
+{
+	ssize_t count = 0;
+	int i, uv;
+	if (!buf)
+		return 0;
+	//Ceiling
+	for (i = 1; i < a53_pwr_clk.c.num_fmax; i++) {
+		uv = cpr_regulator_get_ceiling_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0) return 0;
+		count += sprintf(buf + count, "pwrcl_Vmax:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	//Floor
+		uv = cpr_regulator_get_floor_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0) return 0;
+		count += sprintf(buf + count, "pwrcl_Vmin:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	//current
+		uv = cpr_regulator_get_last_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0) return 0;
+		count += sprintf(buf + count, "pwrcl_Vcur:%lumhz: %d mV\n",
+					a53_pwr_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	}
+	//Big ceiling
+	for (i = 1; i < a53_perf_clk.c.num_fmax; i++) {
+		uv = cpr_regulator_get_ceiling_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+		count += sprintf(buf + count, "perfcl_Vmax:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	//floor
+		uv = cpr_regulator_get_floor_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+		count += sprintf(buf + count, "perfcl_Vmin:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	//current
+		uv = cpr_regulator_get_last_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i]);
+		if (uv < 0)
+			return 0;
+		count += sprintf(buf + count, "perfcl_Vcur:%lumhz: %d mV\n",
+					a53_perf_clk.c.fmax[i] / 1000000,
+					uv / 1000);
+	}
+	return count;
+}
+ssize_t set_Voltages(const char *buf, size_t count)
+{
+	int i, mv, ret;
+	char line[32];
+	if (!buf)
+		return -EINVAL;
+	for (i = 1; i < a53_pwr_clk.c.num_fmax; i++)
+	{
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_ceiling_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+	//floor
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_floor_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+	//current
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_last_voltage(
+					a53_pwr_clk.c.vdd_class->regulator[0],
+					a53_pwr_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+	}
+	for (i = 1; i < a53_perf_clk.c.num_fmax; i++)
+	{
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_ceiling_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_floor_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+		ret = sscanf(buf, "%d", &mv);
+		if (ret != 1)
+			return -EINVAL;
+		ret = cpr_regulator_set_last_voltage(
+					a53_perf_clk.c.vdd_class->regulator[0],
+					a53_perf_clk.c.vdd_class->vdd_uv[i],
+					mv * 1000);
+        if (ret < 0)
+			return ret;
+         ret = sscanf(buf, "%s", line);
+		buf += strlen(line) + 1;
+	}
+	return count;
+}
+#endif
+
 static int of_get_fmax_vdd_class(struct platform_device *pdev, struct clk *c,
 								char *prop_name)
 {
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 3c72aef8..5f16bba1 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -805,6 +805,19 @@ static ssize_t show_bios_limit(struct cpufreq_policy *policy, char *buf)
 	return sprintf(buf, "%u\n", policy->cpuinfo.max_freq);
 }
 
+#ifdef CONFIG_VOLTAGE_CONTROL
+extern ssize_t get_Voltages(char *buf);
+static ssize_t show_UV_mV_table(struct cpufreq_policy *policy, char *buf)
+{
+	return get_Voltages(buf);
+}
+extern ssize_t set_Voltages(const char *buf, size_t count);
+static ssize_t store_UV_mV_table(struct cpufreq_policy *policy, const char *buf, size_t count)
+{
+	return set_Voltages(buf, count);
+}
+#endif
+
 cpufreq_freq_attr_ro_perm(cpuinfo_cur_freq, 0400);
 cpufreq_freq_attr_ro(cpuinfo_min_freq);
 cpufreq_freq_attr_ro(cpuinfo_max_freq);
@@ -820,6 +833,10 @@ cpufreq_freq_attr_rw(scaling_max_freq);
 cpufreq_freq_attr_rw(scaling_governor);
 cpufreq_freq_attr_rw(scaling_setspeed);
 
+#ifdef CONFIG_VOLTAGE_CONTROL
+cpufreq_freq_attr_rw(UV_mV_table);
+#endif
+
 static struct attribute *default_attrs[] = {
 	&cpuinfo_min_freq.attr,
 	&cpuinfo_max_freq.attr,
@@ -832,6 +849,9 @@ static struct attribute *default_attrs[] = {
 	&scaling_driver.attr,
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
+#ifdef CONFIG_VOLTAGE_CONTROL
+	&UV_mV_table.attr,
+#endif
 	NULL
 };
 
diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index c0c380c3..2562496b 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -897,6 +897,13 @@ config REGULATOR_CPRH_KBSS
 	  independent voltage supplies. This driver reads both initial voltage
 	  and CPR target quotient values out of hardware fuses.
 
+config VOLTAGE_CONTROL
+	bool "Enable CPU voltage control"
+	depends on REGULATOR_CPR3
+	default n
+	help
+	  Enable CPU voltage control for MSM8953.
+	  
 config REGULATOR_KRYO
 	bool "Kryo regulator driver"
 	depends on OF
diff --git a/drivers/regulator/cpr3-regulator.c b/drivers/regulator/cpr3-regulator.c
index ba354472..4c318e4d 100644
--- a/drivers/regulator/cpr3-regulator.c
+++ b/drivers/regulator/cpr3-regulator.c
@@ -4145,6 +4145,82 @@ static struct regulator_ops cpr3_regulator_ops = {
 	.list_corner_voltage	= cpr3_regulator_list_corner_voltage,
 };
 
+#ifdef CONFIG_VOLTAGE_CONTROL
+int cpr_regulator_get_ceiling_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].ceiling_volt;
+
+	return -EINVAL;
+}
+int cpr_regulator_get_floor_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].floor_volt;
+
+	return -EINVAL;
+}
+int cpr_regulator_get_last_voltage(struct regulator *regulator,
+		int cori)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count)
+		return cpr_vreg->corner[cori].last_volt;
+
+	return -EINVAL;
+}
+
+int cpr_regulator_set_ceiling_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].ceiling_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+int cpr_regulator_set_floor_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].floor_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+int cpr_regulator_set_last_voltage(struct regulator *regulator,
+		int cori, int volt)
+{
+	struct cpr3_regulator *cpr_vreg = regulator_get_drvdata(regulator);
+	cori--;
+	if (cori >= 0 && cori < cpr_vreg->corner_count) {
+		mutex_lock(&cpr_vreg->thread->ctrl->lock);
+		cpr_vreg->corner[cori].last_volt = volt;
+		mutex_unlock(&cpr_vreg->thread->ctrl->lock);
+		return 0;
+	}
+
+	return -EINVAL;
+}
+#endif
+
 /**
  * cprh_regulator_get_voltage() - get the voltage corner for the CPR3 regulator
  *			associated with the regulator device
-- 
2.23.0

